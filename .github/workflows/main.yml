# .github/workflows/main.yml

name: DevSecOps Image Scan Pipeline

# Dispara este workflow en cada push al branch principal (main/master)
# y en cada Pull Request (PR) contra el branch principal.
on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

jobs:
  trivy_scan:
    # Ejecutar en el sistema operativo Ubuntu
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      # Paso 1: Construir la imagen de Docker
      - name: Build Docker Image
        id: build-image
        run: docker build -t mi-app-test:latest .

      # Paso 2: Escaneo de Vulnerabilidades con Trivy
      # Usaremos una Action preconstruida que facilita la integración
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          # 1. ¿Qué vamos a escanear? (Nuestra imagen construida)
          image-ref: 'mi-app-test:latest'

          # 2. Formato de salida (table es fácil de leer)
          format: 'table'

          # 3. CRITERIO DE FALLO (Policy as Code en acción)
          # Esto es CLAVE. Le dice a Trivy que si encuentra una vulnerabilidad
          # CRITICAL o HIGH, el workflow debe FALLAR.
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

          # 4. Enviar el resultado al log de la Action
          output: 'trivy-results.txt'

      # Paso 3: Opcional - Mostrar el resultado del escaneo
      - name: Show Trivy results
        run: cat trivy-results.txt
